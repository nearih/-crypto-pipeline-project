// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineServiceClient interface {
	NewTickerPipeline(ctx context.Context, opts ...grpc.CallOption) (PipelineService_NewTickerPipelineClient, error)
}

type pipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) NewTickerPipeline(ctx context.Context, opts ...grpc.CallOption) (PipelineService_NewTickerPipelineClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelineService_ServiceDesc.Streams[0], "/PipelineService/NewTickerPipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelineServiceNewTickerPipelineClient{stream}
	return x, nil
}

type PipelineService_NewTickerPipelineClient interface {
	Send(*NewTickerPipelineRequest) error
	CloseAndRecv() (*NewTickerPipelineResponse, error)
	grpc.ClientStream
}

type pipelineServiceNewTickerPipelineClient struct {
	grpc.ClientStream
}

func (x *pipelineServiceNewTickerPipelineClient) Send(m *NewTickerPipelineRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipelineServiceNewTickerPipelineClient) CloseAndRecv() (*NewTickerPipelineResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NewTickerPipelineResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipelineServiceServer is the server API for PipelineService service.
// All implementations must embed UnimplementedPipelineServiceServer
// for forward compatibility
type PipelineServiceServer interface {
	NewTickerPipeline(PipelineService_NewTickerPipelineServer) error
	mustEmbedUnimplementedPipelineServiceServer()
}

// UnimplementedPipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (UnimplementedPipelineServiceServer) NewTickerPipeline(PipelineService_NewTickerPipelineServer) error {
	return status.Errorf(codes.Unimplemented, "method NewTickerPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {}

// UnsafePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServiceServer will
// result in compilation errors.
type UnsafePipelineServiceServer interface {
	mustEmbedUnimplementedPipelineServiceServer()
}

func RegisterPipelineServiceServer(s grpc.ServiceRegistrar, srv PipelineServiceServer) {
	s.RegisterService(&PipelineService_ServiceDesc, srv)
}

func _PipelineService_NewTickerPipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipelineServiceServer).NewTickerPipeline(&pipelineServiceNewTickerPipelineServer{stream})
}

type PipelineService_NewTickerPipelineServer interface {
	SendAndClose(*NewTickerPipelineResponse) error
	Recv() (*NewTickerPipelineRequest, error)
	grpc.ServerStream
}

type pipelineServiceNewTickerPipelineServer struct {
	grpc.ServerStream
}

func (x *pipelineServiceNewTickerPipelineServer) SendAndClose(m *NewTickerPipelineResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipelineServiceNewTickerPipelineServer) Recv() (*NewTickerPipelineRequest, error) {
	m := new(NewTickerPipelineRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipelineService_ServiceDesc is the grpc.ServiceDesc for PipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewTickerPipeline",
			Handler:       _PipelineService_NewTickerPipeline_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pipeline.proto",
}
